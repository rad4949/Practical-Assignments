

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 NormalMatrix;
//uniform vec3 lightPosition;

varying vec3 vNormal;
varying vec4 color; 

float Ka = 1.0;
float Kd = 1.0;
float Ks = 1.0;
float shininessVal = 100.0;
vec3 ambientColor = vec3(0.4, 0.4, 0.6); 
vec3 diffuseColor = vec3(0.5, 0.5, 0.7);   
vec3 specularColor = vec3(1.0);
uniform vec3 lightPosition;

void main() {
    vec4 vertex4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    vec3 vertexPosition = vec3(vertex4) / vertex4.w;
    vNormal = vec3(NormalMatrix * vec4(normal, 0.0));

    vec3 N = normalize(vNormal);
    vec3 L = normalize(lightPosition - vertexPosition);

    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.0;

    if(lambertian > 0.0) {
        vec3 R = reflect(-L, N);
        vec3 V = normalize(-vertexPosition);

        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, shininessVal);
    }

    color = vec4(Ka * ambientColor + Kd * lambertian * diffuseColor + Ks * specular * specularColor, 1.0);

    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 vNormal;

varying vec4 color; 
void main() {
    gl_FragColor = color;
    //gl_FragColor = vec4(normalize(vNormal),1.0);
}`;