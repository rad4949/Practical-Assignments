

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
attribute vec2 texture;
attribute vec3 tangent;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 NormalMatrix;

varying vec3 vVertex;
varying vec3 vNormal;
varying vec2 vTexture;
varying vec3 vTangent;
varying vec3 vBitangent;
varying vec4 color; 

float Ka = 1.0;
float Kd = 1.0;
float Ks = 1.0;
float shininessVal = 100.0;
vec3 ambientColor = vec3(0.4, 0.4, 0.6); 
vec3 diffuseColor = vec3(0.5, 0.5, 0.7);   
vec3 specularColor = vec3(1.0);
uniform vec3 lightPosition;
${shaderHelpers}

uniform vec2 translator;
uniform float scaler;
varying vec3 original;
uniform vec3 relative;

void main() {
    original = vertex;
    vec4 vertex4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    vec3 vertexPosition = vec3(vertex4) / vertex4.w;
    vNormal = vec3(NormalMatrix * vec4(normal, 0.0));
    vTangent = normalize(vec3(NormalMatrix * vec4(tangent, 0.0)));

    //vTexture = texture;
    mat4 matr1 = translation(-translator);
    mat4 matr2 = translation(translator);
    mat4 matr3 = scaling(scaler);
    vec4 t1 = matr1*vec4(texture,0.,1.);
    vec4 s1 = matr3*t1;
    vec4 t2 = matr2*s1;
    vTexture = t2.xy;

    // Gram-Schmidt orthogonalization give priority either to normal
    vTangent= normalize(vTangent - dot(vTangent, vNormal) * vNormal);
vBitangent = normalize(cross(vTangent,vNormal));
    vec3 N = normalize(vNormal);
    vec3 L = normalize(lightPosition - vertexPosition);

    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.0;

    if(lambertian > 0.0) {
        vec3 R = reflect(-L, N);
        vec3 V = normalize(-vertexPosition);

        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, shininessVal);
    }

    color = vec4(Ka * ambientColor + Kd * lambertian * diffuseColor + Ks * specular * specularColor, 1.0);
    vVertex = vertex4.xyz;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 vVertex;
varying vec3 vNormal;
varying vec2 vTexture;
varying vec3 vTangent;
varying vec3 vBitangent;

varying vec4 color;
uniform sampler2D stoneT;
uniform sampler2D normalT;
uniform sampler2D specularT;

float shininessVal = 100.0;

varying vec3 original;
uniform vec3 relative;


uniform vec3 lightPosition;
void main() {
    vec3 T = normalize(vTangent);
    vec3 B = normalize(vBitangent);
    vec3 N = texture2D(normalT,vTexture).rgb;
    N = N * 2.0 - 1.0;
    mat3 TBN = mat3(T, B, N);
    vec3 normal = normalize(TBN * N);
    vec3 L = normalize(lightPosition - vVertex);
    float lambertian = max(dot(normal, L), 0.0);
    float specular = 0.0;
    if(lambertian > 0.0) {
        vec3 R = reflect(-L, normal);      // Reflected light vector
        vec3 V = normalize(-vVertex); // Vector to viewer
        // Compute the specular term
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, shininessVal);
    }
    vec3 stoneColor = vec3(texture2D(stoneT,vTexture));
    vec3 normalColor = vec3(texture2D(normalT,vTexture));
    vec3 specularColor = vec3(texture2D(specularT,vTexture));
    vec4 colorT = vec4(lambertian*stoneColor.rgb,1.0);
    vec4 specT = vec4(specular*specularColor,1.0);
    gl_FragColor = color;
    gl_FragColor = vec4(normalColor,1.0);
    gl_FragColor = colorT+specT;
    if(distance(original,relative)<0.1){
        gl_FragColor = vec4(1.0,0.0,0.0,1.0);
    }
}`;